{"ast":null,"code":"var _jsxFileName = \"/Users/hemnaathsurya/Documents/taskm/src/component/register.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [name, nameUpdate] = useState('');\n  const [username, usernameUpdate] = useState('');\n  const [email, emailUpdate] = useState('');\n  const [password, passwordUpdate] = useState('');\n\n  // const navigate = useNavigate();\n\n  const registerUsingAPI = e => {\n    e.preventDefault();\n    if (validate()) {\n      const objData = {\n        'name': name,\n        'username': username,\n        'email': email,\n        'password': password\n      };\n      fetch('http://localhost:1731/user/register', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(objData)\n      }).then(res => {\n        if (res.status === '201') {\n          toast.success('Success');\n          sessionStorage.setItem('name', resp.name);\n          sessionStorage.setItem('username', resp.username);\n          sessionStorage.setItem('email', resp.email);\n          navigate('/login');\n        } else {\n          toast.error('Registration Failed');\n        }\n      });\n      // .then(json=>console.log(json))\n      // .then((res)=>{\n      //     return res.JSON();\n      // })\n      // .then((resp)=>{\n      //     console.log(resp)\n      //     if (Object.keys(resp).length === 0) {\n      //         toast.error('Registration failed, invalid credentials');\n      //     }else{\n      //         toast.success('Success');\n      //         sessionStorage.setItem('name', resp.name);\n      //         sessionStorage.setItem('username', resp.username);\n      //         sessionStorage.setItem('email', resp.email);\n      //         navigate('/login');\n      //     }\n      // })\n    }\n  };\n  const validate = () => {\n    let result = true;\n    if (name === '' || name === null) {\n      result = false;\n      toast.warning('Please Enter name');\n    }\n    if (username === '' || username === null) {\n      result = false;\n      toast.warning('Please Enter username');\n    }\n    if (email === '' || email === null) {\n      result = false;\n      toast.warning('Please Enter email');\n    }\n    if (password === '' || password === null) {\n      result = false;\n      toast.warning('Please Enter Password');\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: registerUsingAPI,\n      children: [\"name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => nameUpdate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 22\n      }, this), \"username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        onChange: e => usernameUpdate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 26\n      }, this), \"email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: email,\n        onChange: e => emailUpdate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 23\n      }, this), \"password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => passwordUpdate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"q9Tqs8NkACIIr4UrtIehOQEgQz8=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","toast","jsxDEV","_jsxDEV","Register","_s","name","nameUpdate","username","usernameUpdate","email","emailUpdate","password","passwordUpdate","registerUsingAPI","e","preventDefault","validate","objData","fetch","method","headers","body","JSON","stringify","then","res","status","success","sessionStorage","setItem","resp","navigate","error","result","warning","children","onSubmit","type","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hemnaathsurya/Documents/taskm/src/component/register.js"],"sourcesContent":["import { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\nimport {toast} from 'react-toastify';\n\nconst Register = () =>{\n    const [name, nameUpdate] = useState('');\n    const [username, usernameUpdate] = useState('');\n    const [email, emailUpdate] = useState('');\n    const [password, passwordUpdate] = useState('');\n\n    // const navigate = useNavigate();\n\n    const registerUsingAPI = (e)=>{\n        e.preventDefault();\n        if(validate()){\n            const objData = {'name':name, 'username':username, 'email':email, 'password':password}\n            fetch('http://localhost:1731/user/register', {\n                method:'POST',\n                headers:{'content-type':'application/json'},\n                body:JSON.stringify(objData)\n            }).then((res) => {\n                if(res.status === '201'){\n                    toast.success('Success');\n                    sessionStorage.setItem('name', resp.name);\n                    sessionStorage.setItem('username', resp.username);\n                    sessionStorage.setItem('email', resp.email);\n                    navigate('/login');\n                }else{\n                    toast.error('Registration Failed');\n                }\n            })\n            // .then(json=>console.log(json))\n            // .then((res)=>{\n            //     return res.JSON();\n            // })\n            // .then((resp)=>{\n            //     console.log(resp)\n            //     if (Object.keys(resp).length === 0) {\n            //         toast.error('Registration failed, invalid credentials');\n            //     }else{\n            //         toast.success('Success');\n            //         sessionStorage.setItem('name', resp.name);\n            //         sessionStorage.setItem('username', resp.username);\n            //         sessionStorage.setItem('email', resp.email);\n            //         navigate('/login');\n            //     }\n            // })\n        }\n    }\n\n    const validate = () => {\n        let result = true;\n        if (name === '' || name === null) {\n            result = false;\n            toast.warning('Please Enter name');\n        }\n        if (username === '' || username === null) {\n            result = false;\n            toast.warning('Please Enter username');\n        }\n        if (email === '' || email === null) {\n            result = false;\n            toast.warning('Please Enter email');\n        }\n        if (password === '' || password === null) {\n            result = false;\n            toast.warning('Please Enter Password');\n        }\n        return result;\n    }\n\n    return(\n        <div>\n            <form onSubmit={registerUsingAPI}>\n                name:<input type=\"text\" value={name} onChange={e=>nameUpdate(e.target.value)}></input>\n                username:<input type=\"text\" value={username} onChange={e=>usernameUpdate(e.target.value)}></input>\n                email:<input type=\"email\" value={email} onChange={e=>emailUpdate(e.target.value)}></input>\n                password:<input type=\"password\" value={password} onChange={e=>passwordUpdate(e.target.value)}></input>\n                <button type=\"submit\">register</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Register;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}